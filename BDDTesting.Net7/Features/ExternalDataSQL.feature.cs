// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BDDTesting.Net8.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ExternalData_ValidateETLProcessLoadsUserDataCorrectlyFeature
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "ExternalDataSQL.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, System.Threading.Thread.CurrentThread.ManagedThreadId.ToString());
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "ExternalData -> Validate ETL Process Loads User Data Correctly", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "ExternalData -> Validate ETL Process Loads User Data Correctly")))
            {
                await global::BDDTesting.Net8.Features.ExternalData_ValidateETLProcessLoadsUserDataCorrectlyFeature.FeatureSetupAsync(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 3
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ExternalData -> Validate user data against Excel file")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExternalData -> Validate ETL Process Loads User Data Correctly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DATA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DataSource:ExternalDataSQL_UsersData.xlsx")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DataSet:Users")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("1", "John", "Doe", "john.doe@example.com", "555-0101", "3/25/1985 12:00:00 AM", "123 Elm St", "Springfield", "IL", "62701", "USA", "8/9/2024 12:00:00 AM", "8/9/2024 12:00:00 AM", "1", "User", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("2", "Jane", "Smith", "jane.smith@example.com", "555-0102", "7/15/1990 12:00:00 AM", "456 Oak St", "Springfield", "IL", "62702", "USA", "8/9/2024 12:00:00 AM", "8/9/2024 12:00:00 AM", "1", "User", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("3", "Michael", "Brown", "michael.brown@example.com", "555-0103", "11/5/1982 12:00:00 AM", "789 Pine St", "Springfield", "IL", "62703", "USA", "8/9/2024 12:00:00 AM", "8/9/2024 12:00:00 AM", "1", "User", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("4", "Emily", "Johnson", "emily.johnson@example.com", "555-0104", "2/20/1995 12:00:00 AM", "321 Maple St", "Springfield", "IL", "62704", "USA", "8/9/2024 12:00:00 AM", "8/9/2024 12:00:00 AM", "1", "User", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("5", "James", "Williams", "james.williams@example.com", "555-0105", "9/12/1988 12:00:00 AM", "654 Cedar St", "Springfield", "IL", "62705", "USA", "8/9/2024 12:00:00 AM", "8/9/2024 12:00:00 AM", "1", "User", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("6", "Olivia", "Davis", "olivia.davis@example.com", "555-0106", "6/18/1992 12:00:00 AM", "987 Birch St", "Springfield", "IL", "62706", "USA", "8/9/2024 12:00:00 AM", "8/9/2024 12:00:00 AM", "1", "User", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("7", "Liam", "Miller", "liam.miller@example.com", "555-0107", "12/30/1989 12:00:00 AM", "159 Willow St", "Springfield", "IL", "62707", "USA", "8/9/2024 12:00:00 AM", "8/9/2024 12:00:00 AM", "1", "User", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("8", "Sophia", "Wilson", "sophia.wilson@example.com", "555-0108", "4/25/1994 12:00:00 AM", "753 Elm St", "Springfield", "IL", "62708", "USA", "8/9/2024 12:00:00 AM", "8/9/2024 12:00:00 AM", "1", "User", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("9", "Benjamin", "Moore", "benjamin.moore@example.com", "555-0109", "10/14/1986 12:00:00 AM", "852 Oak St", "Springfield", "IL", "62709", "USA", "8/9/2024 12:00:00 AM", "8/9/2024 12:00:00 AM", "1", "User", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("10", "Ava", "Taylor", "ava.taylor@example.com", "555-0110", "8/9/1991 12:00:00 AM", "963 Pine St", "Springfield", "IL", "62710", "USA", "8/9/2024 12:00:00 AM", "8/9/2024 12:00:00 AM", "1", "User", null)]
        public async System.Threading.Tasks.Task ExternalData_ValidateUserDataAgainstExcelFile(
                    string userId, 
                    string firstName, 
                    string lastName, 
                    string email, 
                    string phoneNumber, 
                    string dateOfBirth, 
                    string address, 
                    string city, 
                    string state, 
                    string postalCode, 
                    string country, 
                    string createdAt, 
                    string updatedAt, 
                    string isActive, 
                    string role, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "DATA",
                    "DataSource:ExternalDataSQL_UsersData.xlsx",
                    "DataSet:Users"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("UserId", userId);
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("PhoneNumber", phoneNumber);
            argumentsOfScenario.Add("DateOfBirth", dateOfBirth);
            argumentsOfScenario.Add("Address", address);
            argumentsOfScenario.Add("City", city);
            argumentsOfScenario.Add("State", state);
            argumentsOfScenario.Add("PostalCode", postalCode);
            argumentsOfScenario.Add("Country", country);
            argumentsOfScenario.Add("CreatedAt", createdAt);
            argumentsOfScenario.Add("UpdatedAt", updatedAt);
            argumentsOfScenario.Add("IsActive", isActive);
            argumentsOfScenario.Add("Role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("ExternalData -> Validate user data against Excel file", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
await this.FeatureBackgroundAsync();
#line hidden
#line 8
 await testRunner.GivenAsync(string.Format("the Excel file contains user data for user {0}", userId), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
 await testRunner.WhenAsync("the user data is validated against the Excel file with SQL Database", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
 await testRunner.ThenAsync(string.Format("the database should contain a user with UserId {0} and correct PhoneNumber {1}", userId, phoneNumber), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
